/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     driftHBFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         8000;

deltaT          0.1;

writeControl    adjustableRunTime;

writeInterval   20;

purgeWrite      0;

writeFormat     binary;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  on;

maxCo           5;

maxDeltaT       1;


functions
{
  /*  fieldAverage1
    {							//-start field average
        type            fieldAverage;
        libs            ("libfieldFunctionObjects.so");
        writeControl    writeTime;
        fields
        (
            U.air
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }

            U.water
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }

            alpha.air
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }

            p
            {
                 mean        on;
                 prime2Mean  off;
                 base        time;
            }
        );
      }//-end of field average


  magAlphaIntegral
  {
    functionObjectLibs ("libutilityFunctionObjects.so");
    type coded;
    writeControl    writeTime;
    writeInterval   1;
    redirectType integral;
 
    codeInclude
        #{
             #include "fvm.H"
        #};

     codeOptions
        #{
            -I$(LIB_SRC)/meshTools/lnInclude
        #};

   // outputControl timeStep;
    codeExecute						//-for new version
    #{
      const volScalarField& alpha = mesh().lookupObject<volScalarField>("alpha.air");
      
      volVectorField    gradAlpha(fvc::grad(alpha));
      volScalarField 	magAlpha(mag(gradAlpha));	//-magU(mag(U)); //-scalar
      //volScalarField    magU(mag(U.water))

      scalar volIntegral = 0;

      forAll (magAlpha, cellI)
      {
      volIntegral += magAlpha[cellI]*mesh().V()[cellI];
      }

      Info<<"Volume integral: " << volIntegral << endl;

    #};
  }
*/
  //-----------------------Extract runtime info
  extraInfo
    {
	functionObjectLibs ( "libutilityFunctionObjects.so" );
        type               coded;
        writeControl       writeTime;
        writeInterval      1;
        redirectType       average;

        codeInclude
        #{
             #include "fvm.H"
        #};

        codeOptions
        #{
            -I$(LIB_SRC)/meshTools/lnInclude
        #};

        codeExecute
       	#{
             const volVectorField& Umix = mesh().lookupObject<volVectorField>("U");
             //const volVectorField& Uwater = mesh().lookupObject<volVectorField>("U.water");
	     Info << "max U = " << max(mag(Umix)).value() << ", min  U = " << min(mag(Umix)).value() << endl;
             const volScalarField& p = mesh().lookupObject<volScalarField>("p");
	     Info << "p min/max = " << min(p).value() << ", " << max(p).value() << endl;
	     //const volScalarField& kmix = mesh().lookupObject<volScalarField>("km");
	     //Info << "p min/max = " << min(kmix).value() << ", " << max(kmix).value() << endl;
        #};
    }
/*
  probes1 
	{ 
	  type probes; 
	  functionObjectLibs ("libsampling.so"); 
	  //dictionary probesDict; 
	  region region0; 

	  probeLocations 
	  ( 
	  	(0        0       6.5) 
		(0        0       8.5)
		(0        0       10)   
	  	//(0.05     0.225   0)
	  	//(0.005    0.225   0)
	  	//(69.85    0   8)
	  ); 

	fields 
	( 
		U
	); 
     	outputControlMode timeStep;
        writeInterval   1;
     	outputInterval 1000;
	} //-end of probes
*/
    residuals
    {
        functionObjectLibs ("libutilityFunctionObjects.so");
        type           residuals;
        outputControlMode timeStep;
        outputInterval 1000;
        writeControl   timeStep;
        writeInterval  1;
        fields
        (
            p_rgh
            k
            epsilon

        );
    }

/*
   probes1 
	{ 
	  type probes; 
	  functionObjectLibs ("libsampling.so"); 
	  //dictionary probesDict; 
	  region region0; 

	  probeLocations 
	  ( 
	  	(0.1      0.225   0) 
	  	(0.05     0.225   0)
	  	(0.005    0.225   0)
	  	//(69.85    0   8)
	  ); 

	fields 
	( 
		U.water
	); 
     	outputControlMode timeStep;
     	outputInterval 1000;
	} //-end of probes
*/

    
}

// ************************************************************************* //
